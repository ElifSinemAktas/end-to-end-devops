# -*- mode: ruby -*-
# vi: set ft=ruby :-

# Configuration variables
NODE_COUNT = {
  master: 3,
  worker: 3
}

IP_PREFIX = "192.168.68."
LOADBALANCER_IP = "#{IP_PREFIX}100"
MASTER_IP_START = 100
WORKER_IP_START = 200

# Ubuntu box version
UBUNTU_BOX = "generic/ubuntu2204"

# Host operating system detection
module OS
  def OS.windows?
    (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
  end

  def OS.mac?
    (/darwin/ =~ RUBY_PLATFORM) != nil
  end

  def OS.unix?
    !OS.windows?
  end

  def OS.linux?
    OS.unix? and not OS.mac?
  end
end

# Determine host adapter for bridging in BRIDGE mode
def get_bridge_adapter()
  if OS.windows?
    return %x{powershell -Command "Get-NetRoute -DestinationPrefix 0.0.0.0/0 | Get-NetAdapter | Select-Object -ExpandProperty InterfaceDescription"}.chomp
  elsif OS.linux?
    return %x{ip route | grep default | awk '{ print $5 }'}.chomp
  elsif OS.mac?
    return %x{networksetup -listallhardwareports | awk '/Wi-Fi|Ethernet/{getline; print $2}'}.chomp
  end
end

BRIDGE_ADAPTER = get_bridge_adapter()

# Function to configure /etc/hosts on all nodes
def configure_hosts(node_count, ip_prefix, loadbalancer_ip)
  <<-SHELL
    echo "Starting /etc/hosts configuration on $(hostname)"
    
    # Add proper entries for all nodes
    for i in $(seq 1 #{node_count[:master]}); do
      echo "#{ip_prefix}$((#{MASTER_IP_START} + i)) master$i" | sudo tee -a /etc/hosts
    done
    for i in $(seq 1 #{node_count[:worker]}); do
      echo "#{ip_prefix}$((#{WORKER_IP_START} + i)) worker$i" | sudo tee -a /etc/hosts
    done
    echo "#{loadbalancer_ip} loadbalancer" | sudo tee -a /etc/hosts

    echo "Final /etc/hosts file:"
    cat /etc/hosts
  SHELL
end

# Unified provisioning for all nodes
def provision_node(node_count, ip_prefix, loadbalancer_ip)
  <<-SHELL
    echo "Starting provisioning for $(hostname)"
    sudo apt update && sudo apt upgrade -y
    sed -i "/swap/d" /etc/fstab
    swapoff -a
    systemctl disable --now ufw

    # Configure hosts file
    #{configure_hosts(node_count, ip_prefix, loadbalancer_ip)}

    echo "Provisioning completed for $(hostname)"
  SHELL
end

Vagrant.configure("2") do |config|
  # Control Plane Nodes
  (1..NODE_COUNT[:master]).each do |i|
    config.vm.define "master#{i}" do |master|
      master.vm.box = UBUNTU_BOX
      master.vm.network "public_network", bridge: BRIDGE_ADAPTER, ip: "#{IP_PREFIX}#{MASTER_IP_START + i}"
      master.vm.hostname = "master#{i}"
      master.vm.provider :virtualbox do |vb|
        vb.name = "master-#{i}"  # Custom VM name
        vb.memory = 3072
        vb.cpus = 2
      end
      master.vm.provision "shell", inline: provision_node(NODE_COUNT, IP_PREFIX, LOADBALANCER_IP)
    end
  end

  # Worker Nodes
  (1..NODE_COUNT[:worker]).each do |i|
    config.vm.define "worker#{i}" do |worker|
      worker.vm.box = UBUNTU_BOX
      worker.vm.network "public_network", bridge: BRIDGE_ADAPTER, ip: "#{IP_PREFIX}#{WORKER_IP_START + i}"
      worker.vm.hostname = "worker#{i}"
      worker.vm.provider :virtualbox do |vb|
        vb.name = "worker-#{i}"  # Custom VM name
        vb.memory = 1024
        vb.cpus = 1
      end
      worker.vm.provision "shell", inline: provision_node(NODE_COUNT, IP_PREFIX, LOADBALANCER_IP)
    end
  end

  # Load Balancer
  config.vm.define "loadbalancer" do |lb|
    lb.vm.box = UBUNTU_BOX
    lb.vm.network "public_network", bridge: BRIDGE_ADAPTER, ip: LOADBALANCER_IP
    lb.vm.hostname = "loadbalancer"
    lb.vm.provider :virtualbox do |vb|
      vb.name = "loadbalancer"  # Custom VM name
      vb.memory = 1024
      vb.cpus = 1
    end
    lb.vm.provision "shell", inline: provision_node(NODE_COUNT, IP_PREFIX, LOADBALANCER_IP)
  end
end
